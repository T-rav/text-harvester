----- FILE: scribe/public/index.html -----
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Scribe AI</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


----- FILE: scribe/src/index.tsx -----
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";
import { GoogleOAuthProvider } from "@react-oauth/google";
import { AuthProvider } from "./components/AuthContext";
import { BrowserRouter } from "react-router-dom";

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);

root.render(
  <GoogleOAuthProvider clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID || ''}>
    <BrowserRouter>
      <AuthProvider>
        <React.StrictMode>
          <App />
        </React.StrictMode>
      </AuthProvider>
    </BrowserRouter>
  </GoogleOAuthProvider>
);


----- FILE: scribe/src/App.tsx -----
import React from 'react';
import { Route, Routes, Navigate } from 'react-router-dom';
import './App.css';
import Header from './components/Header/Header';
import LandingPageForm from './components/LandingPageForm/LandingPageForm';
import Footer from './components/Footer/Footer';
import Login from './components/Login/Login';
import Dashboard from './components/Dashboard/Dashboard';
import { NotificationProvider } from './components/NotificationContext';
import { useAuth } from './components/AuthContext';
import Spinner from './components/Spinner/Spinner';

const App: React.FC = () => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    return <Spinner />; 
  }

  return (
    <NotificationProvider>
      <Header />
      <div className="main-content">
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/dashboard" element={isAuthenticated ? <Dashboard /> : <Navigate to="/login" />} />
          <Route path="/" element={<LandingPageForm />} />
        </Routes>
      </div>
      <Footer />
    </NotificationProvider>
  );
};

export default App;


----- FILE: scribe/src/App.test.tsx -----
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


----- FILE: scribe/src/App.css -----
.App {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  background-color: rgb(245, 236, 213);
}

.header {
  flex-shrink: 0;
}

.main-content {
  flex-grow: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;
}

.form-container {
  background-color: rgb(230,213,188);
  padding: 20px;
  margin: 20px;
  width: 100%;
  max-width: 500px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: left;
  font-weight: 700;
}

.footer {
  flex-shrink: 0;
  background-color: #d2b48c;
  color: #4a4a4a;
  padding: 10px 20px;
  text-align: center;
  width: 100%;
  font-family: "DM Sans", sans-serif;
}

.footer-left {
  flex-shrink: 0;
}

.footer-content {
  flex-grow: 1;
  text-align: center;
}

.footer p {
  margin: 5px 0;
}

.dropdown {
  position: relative;
}

.dropdown-toggle {
  background: none;
  border: none;
  cursor: pointer;
  padding: 10px;
  font-family: "Space Mono", monospace;
  font-size: 14px;
  font-weight: 500;
  color: rgb(92, 69, 35);
}

.dropdown-menu {
  position: absolute;
  right: 0;
  top: 40px;
  background-color: #fff;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  padding: 10px;
  border-radius: 4px;
  z-index: 1000;
}

.sign-in {
  background-color: rgb(217, 203, 176);
  border: none;
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: "Space Mono", monospace;
  color: rgb(92, 69, 35);
  font-weight: 500;
}

.sign-in:hover {
  background-color: #d1b179;
}

/* Additional styles for the spinner */
.spinner {
  border: 4px solid rgba(255, 255, 255, 0.3);
  border-top: 4px solid white;
  border-radius: 50%;
  width: 16px;
  height: 16px;
  animation: spin 0.6s linear infinite;
  display: inline-block;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}


----- FILE: scribe/src/index.css -----
html, body {
  height: 100%;
  margin: 0;
  background-color: #f5ecd5; /* Set this to the desired background color */
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root {
  height: 100%; 
  display: flex;
  flex-direction: column;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


----- FILE: scribe/src/components/Footer/Footer.css -----
.footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #d2b48c;
  color: #4a4a4a;
  padding: 10px 20px;
  text-align: center;
  width: 100%;
  font-family: "DM Sans", sans-serif;
  box-sizing: border-box;
}

.footer-left {
  flex-shrink: 0;
  position: relative; /* Ensure the dropdown menu is positioned relative to the footer */
}

.footer-content {
  flex-grow: 1;
  text-align: center;
}

.footer p {
  margin: 5px 0;
}


----- FILE: scribe/src/components/LandingPageForm/LandingPageForm.css -----
.landing-page {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  padding: 20px;
  box-sizing: border-box;
}

.marketing-copy-container {
  display: flex;
  justify-content: center;
  width: 100%;
  margin-top: -20px;
}

.marketing-copy {
  width: 80%;
  padding: 15px;
  font-family: "Space Mono", monospace;
  font-weight: 600;
  color: #4A4A4A; /* Use the same text color as the form */
  background-color: #F5ECD5; /* Match the background color of the form */
  border: 1px solid rgb(199, 162, 107); /* Match the border color of the form */
  border-radius: 8px; /* Subtle rounded corners for consistency */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.marketing-copy h1 {
  font-size: 20px;
  margin-bottom: 10px;
  color: #4A4A4A; /* Darker color to match form text */
}

.marketing-copy p {
  font-size: 16px;
  margin-bottom: 2px;
  line-height: 1.4;
  color: #4A4A4A; /* Match the form text color */
}

.marketing-copy strong {
  color: rgb(199, 162, 107);  /* Use the same color as the form's button */
}

.cta-message {
  margin-top: 20px;
  font-size: 14px;
  font-weight: 600;
  color: #4a4a4a;
  text-align: center;
}

.cta-message a {
  color: #d2b48c; /* Match the button color */
  text-decoration: none;
}

.cta-message a:hover {
  color: #bfa26c;
  text-decoration: underline;
}

.cta-message p {
  margin: 10px 0;
  font-size: 14px;
}

.form-container {
  background-color: rgb(230, 213, 188);
  padding: 20px;
  width: 100%;
  max-width: 500px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: left;
  font-weight: 700;
  font-family: "Space Mono", monospace;
  margin: 40px auto; /* Ensure the form container stays centered with some margin */
}

h2 {
  text-align: center;
  font-family: "DM Sans", sans-serif;
  color: #4A4A4A;
  margin-bottom: 20px;
  font-size: 22px; /* Adjusted font size for balance */
}

label {
  display: block;
  margin-bottom: 5px;
  font-weight: 600;
  color: #4A4A4A;
  font-family: "Space Mono", monospace;
  font-size: 14px; /* Standard font size */
}

input[type="text"], select {
  width: 100%;
  padding: 10px;
  margin-bottom: 15px;
  border-radius: 4px;
  border: 1px solid rgb(199, 162, 107);
  font-family: "Space Mono", monospace;
  background-color: #FFF9F0;
  box-sizing: border-box;
  font-size: 14px; /* Standard input font size */
}

.file-upload-container {
  margin-bottom: 15px;
  text-align: center;
}

.file-upload-label {
  display: block;
  cursor: pointer;
}

.file-dropzone {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 15px;
  border: 2px dashed rgb(199, 162, 107);
  border-radius: 8px;
  background-color: #f5ecd5;
  color: #4A4A4A;
  font-family: "Space Mono", monospace;
  font-weight: 600;
  cursor: pointer;
}

.file-dropzone span {
  font-size: 14px;
  margin-bottom: 5px;
}

.file-dropzone p {
  font-size: 12px;
  color: #888;
  margin: 0;
  text-align: center;
}

.submit-button {
  width: 100%;
  padding: 10px;
  border: none;
  border-radius: 4px;
  background-color: rgb(199, 162, 107); 
  color: white;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: "Space Mono", monospace;
  font-weight: 600;
}

.submit-button:hover {
  background-color: #bfa26c;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
}

.submit-button:disabled {
  cursor: not-allowed;
  opacity: 0.7;
}

.spinner {
  width: 20px;
  height: 20px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s ease infinite;
  margin: auto;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.error-message {
  color: red;
  margin-bottom: 10px;
}

.transcription-result {
  background-color: #f5ecd5;
  padding: 20px;
  margin-top: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  color: #4a4a4a;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
  box-sizing: border-box;
  border: 1px solid #ddd;
  position: relative;
}

.close-button {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 20px;
  cursor: pointer;
  color: #888;
}

.close-button:hover {
  color: #333;
}

.transcription-result h3 {
  margin-bottom: 10px;
  font-size: 18px; /* Adjusted font size for balance */
  font-weight: bold;
  color: #333;
}

.transcription-result p {
  margin-bottom: 10px;
  font-size: 16px;
  line-height: 1.5;
}

.transcription-result h4 {
  margin-bottom: 10px;
  font-size: 18px;
  font-weight: bold;
  color: #333;
}

.transcription-result pre {
  max-height: 200px;
  overflow-y: auto;
  margin: 0;
  font-size: 14px;
  line-height: 1.5;
  white-space: pre-wrap;
}

.copy-button {
  background-color: #d2b48c;
  border: none;
  padding: 5px 10px;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: "Space Mono", monospace;
  font-weight: 500;
  border-radius: 4px;
}

.copy-button:hover {
  background-color: #bfa26c;
}

.transcription-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.transcription-tabs {
  display: flex;
  justify-content: flex-start;
  margin-bottom: 10px;
}

.tab-button {
  padding: 10px 20px;
  border: 1px solid rgb(199, 162, 107);
  background-color: #f5ecd5;
  color: #4a4a4a;
  cursor: pointer;
  font-family: "Space Mono", monospace;
  font-weight: 600;
  flex: 1;
  text-align: center;
  transition: background-color 0.3s ease, color 0.3s ease;
}

.tab-button:not(:last-child) {
  border-right: none;
}

.tab-button.active {
  background-color: rgb(199, 162, 107);
  color: white;
}

.tab-button:hover {
  background-color: #d2b48c;
  color: white;
}

.transcript-content {
  max-height: 200px;
  overflow-y: auto;
  margin: 0;
  font-size: 14px;
  line-height: 1.5;
  white-space: pre-wrap;
  border: 1px solid rgb(199, 162, 107);
  padding: 10px;
  background-color: #FFF9F0;
}

.tab-button[disabled] {
  background-color: #e0e0e0;
  color: #a0a0a0;
  cursor: not-allowed;
}
 

----- FILE: scribe/src/components/LandingPageForm/LandingPageForm.tsx -----
import React, { useState } from 'react';
import './LandingPageForm.css';

const LandingPageForm: React.FC = () => {
  const [videoLink, setVideoLink] = useState('');
  const [file, setFile] = useState<File | null>(null);
  const [transformOption, setTransformOption] = useState('summarize');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [results, setResults] = useState<
    { title: string; duration: string; transcript: string; transformedTranscript: string; transformOptionUsed: string }[]
  >([]);
  const [activeTab, setActiveTab] = useState<string>('transformed');

  const maxFileSizeInMB = 2500;
  const transriptionType = 'openai-srt';

  const isFileSizeValid = (file: File, maxSizeInMB: number): boolean => {
    const maxSizeInBytes = maxSizeInMB * 1024 * 1024; 
    return file.size <= maxSizeInBytes;
  };
  
  const handleVideoLinkChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setVideoLink(e.target.value);
    setError(null); 
    setFile(null);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const selectedFile = e.target.files[0];

      if (!isFileSizeValid(selectedFile, maxFileSizeInMB)) {
        setError(`File size exceeds ${maxFileSizeInMB} MB. Please upload a smaller file.`);
        setFile(null);
        return;
      }

      setFile(selectedFile);
      setError(null);
    }
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();

    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      const selectedFile = e.dataTransfer.files[0];

      if (!isFileSizeValid(selectedFile, maxFileSizeInMB)) {
        setError(`File size exceeds ${maxFileSizeInMB} MB. Please upload a smaller file.`);
        setFile(null);
        return;
      }

      setFile(selectedFile);
      setError(null);
      setVideoLink('');
      e.dataTransfer.clearData();
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    let data: FormData | { url: string; transform: string; transcriptionType: string };

    if (file) {
      data = new FormData();
      data.append('file', file);
      data.append('transform', transformOption);
      data.append('transcriptionType', transriptionType);

      try {
        const response = await fetch('http://localhost:3001/transcribe/file', {
          method: 'POST',
          body: data,
          credentials: 'include',
        });

        if (response.ok) {
          const result = await response.json();

          const structuredResult = {
            title: result.title,
            duration: result.duration,
            transcript: result.transcript,
            transformedTranscript: result.transformed_transcript,
            transformOptionUsed: transformOption,
          };

          setResults((prevResults) => [structuredResult, ...prevResults]);
        } else {
          const error = await response.json();
          setError(error.error || response.statusText);
        }
      } catch (error) {
        setError('An error occurred while processing the request.');
      } finally {
        setLoading(false);
      }

    } else if (videoLink) {
      if (videoLink.includes('youtube.com') || videoLink.includes('youtu.be')) {
        data = {
          url: videoLink,
          transform: transformOption,
          transcriptionType: transriptionType,
        };
      } else if (videoLink.includes('drive.google.com')) {
        const fileIdMatch = videoLink.match(/\/d\/(.*?)\//);
        const fileId = fileIdMatch ? fileIdMatch[1] : null;

        if (!fileId) {
          setError('Invalid Google Drive URL.');
          setLoading(false);
          return;
        }

        data = {
          url: `https://drive.google.com/uc?export=download&id=${fileId}`,
          transform: transformOption,
          transcriptionType: transriptionType,
        };
      } else if (videoLink.includes('vimeo.com')) {
        const videoIdMatch = videoLink.match(/vimeo\.com\/(\d+)/);
        const videoId = videoIdMatch ? videoIdMatch[1] : null;

        if (!videoId) {
          setError('Invalid Vimeo URL.');
          setLoading(false);
          return;
        }

        data = {
          url: videoLink,
          transform: transformOption,
          transcriptionType: transriptionType,
        };
      } else {
        setError('Unsupported URL. Please provide a valid YouTube, Google Drive, or Vimeo link.');
        setLoading(false);
        return;
      }

      try {
        const response = await fetch('http://localhost:3001/transcribe/link', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
          credentials: 'include',
        });

        if (response.ok) {
          const result = await response.json();

          const structuredResult = {
            title: result.title,
            duration: result.duration,
            transcript: result.transcript,
            transformedTranscript: result.transformed_transcript,
            transformOptionUsed: transformOption,
          };

          setResults((prevResults) => [structuredResult, ...prevResults]);
        } else {
          const error = await response.json();
          setError(error.error || response.statusText);
        }
      } catch (error) {
        setError('An error occurred while processing the request.');
      } finally {
        setLoading(false);
      }
    } else {
      setError('Please provide either a video link or upload a file.');
      setLoading(false);
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const closeTranscript = (index: number) => {
    setResults((prevResults) => prevResults.filter((_, i) => i !== index));
  };

  return (
    <div className="landing-page">
      <div className="marketing-copy-container">
        <div className="marketing-copy">
          <h1>Unlock Insights from Your Videos Instantly</h1>
          <p>
            <strong>Transform the way you consume videos.</strong> Whether it's a lecture, a meeting, or your kid's school sending a video communication, 
            our tool empowers you to <strong>quickly understand and extract the most important information.</strong>
          </p>
          <p>
            With options to <strong>summarize</strong>, <strong>highlight key points</strong>, or even <strong>just format the content for readability</strong>, 
            you can now digest hours of video in just minutes.
          </p>
          <p>
            Perfect for <strong>busy professionals</strong>, <strong>students</strong>, <strong>parents</strong>, or anyone looking to <strong>maximize the value of videos.</strong>
          </p>
          <div className="cta-message">
            <a href="#">Start optimizing your video experience today!</a>
            <p>Or</p>
            <a href="https://www.youtube.com/watch?v=YourVideoID" target="_blank" rel="noopener noreferrer">
              Watch this quick explainer video to learn more!
            </a>
          </div>
        </div>
      </div>
      <div className="form-container">
        {error && <div className="error-message">{error}</div>}
        <form onSubmit={handleSubmit}>
          <div
            className="file-upload-container"
            onDrop={handleDrop}
            onDragOver={handleDragOver}
          >
            <input
              type="file"
              id="file-upload"
              accept="video/*"
              onChange={handleFileChange}
              style={{ display: 'none' }}
            />
            <label htmlFor="file-upload" className="file-upload-label">
              <div className="file-dropzone">
                {file ? (
                  <span>{file.name}</span>
                ) : (
                  <>
                    <span>Upload file</span>
                    <p>Click to browse or drag & drop a file here</p>
                  </>
                )}
              </div>
            </label>
          </div>

          <label htmlFor="video-link">Paste a video link from YouTube, Google Drive, or Vimeo</label>
          <input
            type="text"
            id="video-link"
            value={videoLink}
            onChange={handleVideoLinkChange}
            placeholder="Paste YouTube, Google Drive, or Vimeo link here"
          />

          <label htmlFor="transform-option">Enhancement</label>
          <select
            id="transform-option"
            value={transformOption}
            onChange={(e) => setTransformOption(e.target.value)}
          >
            <option value="none">None</option>
            <option value="summarize">Summarize</option>
            <option value="formatting">Format for Readability</option>
            <option value="removefillerwords">Remove Filler Words</option>
            <option value="paragraphs">Make Paragraphs</option>
            <option value="keywords">Keyword Extraction</option>
          </select>

          <button type="submit" className="submit-button" disabled={loading}>
            {loading ? <div className="spinner"></div> : 'Transcribe'}
          </button>
        </form>
        {results.map((result, index) => (
          <div key={index} className="transcription-result">
            <button className="close-button" onClick={() => closeTranscript(index)}>X</button>
            <h3>#{results.length - index}</h3>
            <h4>Title: {result.title}</h4>
            <p>Duration: {result.duration} seconds</p>
            <div className="transcription-tabs">
              <button
                className={`tab-button ${activeTab === 'transformed' ? 'active' : ''}`}
                onClick={() => setActiveTab('transformed')}
              >
                Transformed ({result.transformOptionUsed})
              </button>
              <button
                className={`tab-button ${activeTab === 'full' ? 'active' : ''}`}
                onClick={() => setActiveTab('full')}
              >
                Full Transcript
              </button>
            </div>
            <div className="transcript-content">
              {activeTab === 'transformed' ? (
                <pre>{result.transformedTranscript}</pre>
              ) : (
                <pre>{result.transcript}</pre>
              )}
            </div>
            <button
              className="copy-button"
              onClick={() =>
                copyToClipboard(activeTab === 'transformed' ? result.transformedTranscript : result.transcript)
              }
            >
              Copy
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default LandingPageForm;


----- FILE: scribe/src/components/TranscribeForm/TranscribeForm.tsx -----
import React, { useState } from 'react';
import './TranscribeForm.css';
import { useNotificationContext } from '../NotificationContext';

const TranscribeForm: React.FC = () => {
  const [videoLink, setVideoLink] = useState('');
  const [transcriptionType, setTranscriptionType] = useState('openai');
  const [transcriptionPrompt, setTranscriptionPrompt] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [result, setResult] = useState<{ title: string; duration: string; transcript: string } | null>(null);
  const { addNotification } = useNotificationContext();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setResult(null);

    let data;

    if (videoLink.includes('youtube.com') || videoLink.includes('youtu.be')) {
      data = {
        url: videoLink,
        transcriptionType: transcriptionType,
      };
    } else if (videoLink.includes('drive.google.com')) {
      const fileIdMatch = videoLink.match(/\/d\/(.*?)\//);
      const fileId = fileIdMatch ? fileIdMatch[1] : null;

      if (!fileId) {
        setError('Invalid Google Drive URL.');
        setLoading(false);
        return;
      }

      data = {
        url: `https://drive.google.com/uc?export=download&id=${fileId}`,
        transcriptionType: transcriptionType,
      };
    } else {
      setError('Unsupported URL. Please provide a valid YouTube or Google Drive link.');
      setLoading(false);
      return;
    }

    try {
      const response = await fetch('http://localhost:3001/transcribe/link', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
        credentials: 'include', // Include cookies in the request
      });

      if (response.ok) {
        const result = await response.json();
        
        const structuredResult = {
          title: result.title,
          duration: result.duration,
          transcript: result.transcript,
        };
        
        // Add notification
        addNotification({
          title: structuredResult.title,
          datetime: new Date().toLocaleString(),
          length: structuredResult.duration,
          progress: 'Completed',
          transcript: structuredResult.transcript,
        });

        // Set the structured result state to display it below the button
        setResult(structuredResult);

      } else {
        const error = await response.json();
        setError(error.error || response.statusText);
      }
    } catch (error) {
      setError('An error occurred while processing the request.');
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = () => {
    if (result) {
      const formattedText = `Title: ${result.title}\nDuration: ${result.duration}\n\n${result.transcript}`;
      navigator.clipboard.writeText(formattedText);
    }
  };

  const closeTranscript = () => {
    // Clear the result and input fields
    setResult(null);
    setVideoLink('');
    setTranscriptionType('openai');
    setTranscriptionPrompt('');
  };

  return (
    <div className="form-container">
      <h2>Transcribe Videos</h2>
      {error && <div className="error-message">{error}</div>}
      <form onSubmit={handleSubmit}>
        <label htmlFor="video-link">Video Link</label>
        <input
          type="text"
          id="video-link"
          value={videoLink}
          onChange={(e) => setVideoLink(e.target.value)}
          placeholder="Paste YouTube or Google Drive link here"
        />

        <label htmlFor="transcription-type">Transcription Type</label>
        <select
          id="transcription-type"
          value={transcriptionType}
          onChange={(e) => setTranscriptionType(e.target.value)}
        >
          <option value="openai">Text</option>
          <option value="openai-vtt">VTT</option>
          <option value="openai-srt">SRT</option>
        </select>

        <label htmlFor="transcription-prompt">Transcription Prompt</label>
        <textarea
          id="transcription-prompt"
          value={transcriptionPrompt}
          onChange={(e) => setTranscriptionPrompt(e.target.value)}
          placeholder="Enter a prompt for the transcription (Optional)"
          rows={3}
        ></textarea>

        <button type="submit" className="submit-button" disabled={loading}>
          {loading ? <div className="spinner"></div> : 'Transcribe'}
        </button>
      </form>

      {/* Display the result below the button */}
      {result && (
        <div className="transcription-result">
          <button className="close-button" onClick={closeTranscript}>X</button>
          <h3>Title: {result.title}</h3>
          <p>Duration: {result.duration} seconds</p>
          <h4>Transcript:</h4>
          <pre>{result.transcript}</pre>
          <button className="copy-button" onClick={copyToClipboard}>Copy Transcript</button>
        </div>
      )}
    </div>
  );
};

export default TranscribeForm;


----- FILE: scribe/src/components/TranscribeForm/TranscribeForm.css -----
.form-container {
  background-color: rgb(230,213,188); /* Adjust to match the original background color */
  padding: 20px;
  margin: 20px;
  width: 100%;
  max-width: 500px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: left;
  font-weight: 700;
}

.form-container h2 {
  font-size: 24px;
  margin-bottom: 24px;
  text-align: center;
  color: #4A4A4A; /* Adjust the color to match the original text color */
  font-family: "DM Sans", sans-serif;
}

.form-container label {
  display: block;
  margin-bottom: 5px;
  font-weight: 600;
  color: #4A4A4A; /* Adjust the color to match the original text color */
  font-family: "Space Mono", monospace;
}

.form-container input, 
.form-container select,
.form-container textarea {
  width: 100%;
  padding: 10px;
  margin-bottom: 15px;
  border: 1px solid rgb(199, 162, 107);
  border-radius: 4px;
  font-size: 16px;
  background-color: #FFF9F0; /* Adjust the input background color */
  font-family: "Space Mono", monospace;
  box-sizing: border-box; /* Ensures padding doesn't affect the width */
}

.submit-button {
  width: 100%;
  padding: 10px;
  border: none;
  border-radius: 4px;
  background-color: rgb(199, 162, 107); /* Adjust to match the button color */
  color: white;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: "Space Mono", monospace;
  font-weight: 600;
  position: relative;
}

.submit-button:disabled {
  cursor: not-allowed;
  opacity: 0.7;
}

.spinner {
  width: 20px;
  height: 20px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s ease infinite;
  margin: auto;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.error-message {
  color: red;
  margin-bottom: 10px;
}

.transcription-result {
  background-color: #f5ecd5; /* Match the background color used in notifications */
  padding: 20px;
  margin-top: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  font-family: "Space Mono", monospace; /* Font family to match the modal text */
  color: #4a4a4a; /* Text color similar to the modal */
  max-width: 600px; /* Set a max-width similar to the modal */
  margin-left: auto; /* Center the result area */
  margin-right: auto;
  box-sizing: border-box; /* Ensures padding doesn't affect the width */
  border: 1px solid #ddd; /* Border similar to modal outline */
  position: relative; /* For positioning the close button */
}

.close-button {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 20px;
  cursor: pointer;
  color: #888;
}

.close-button:hover {
  color: #333;
}

.transcription-result h3 {
  margin-bottom: 10px;
  font-family: "DM Sans", sans-serif; /* Title font similar to the modal */
  font-size: 20px; /* Adjust the font size to match the modal title */
  font-weight: bold;
  color: #333; /* Title color similar to the modal */
}

.transcription-result p {
  margin-bottom: 10px;
  font-size: 16px;
  line-height: 1.5;
}

.transcription-result h4 {
  margin-bottom: 10px;
  font-family: "DM Sans", sans-serif;
  font-size: 18px;
  font-weight: bold;
  color: #333;
}

.transcription-result pre {
  margin: 0;
  font-size: 14px;
  line-height: 1.5;
  white-space: pre-wrap; /* Preserves formatting of the transcript */
}

.copy-button {
  background-color: #d2b48c;
  border: none;
  padding: 10px 20px;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: "Space Mono", monospace;
  color: #4a4a4a;
  font-weight: 500;
  border-radius: 4px;
  margin-top: 15px;
}

.copy-button:hover {
  background-color: #bfa26c;
}


----- FILE: scribe/src/components/Spinner/Spinner.css -----
.spinner-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh; /* Make the spinner take up full height */
    background-color: #f5ecd5; /* Match your app's background color */
  }
  
  .spinner-circle {
    width: 50px;
    height: 50px;
    border: 8px solid rgba(255, 255, 255, 0.3);
    border-top: 8px solid #d2b48c;
    border-radius: 50%;
    animation: spin 1.5s linear infinite;
  }
  
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  
  .spinner-container p {
    margin-top: 15px;
    font-size: 18px;
    color: #4a4a4a;
    font-family: 'Space Mono', monospace;
    font-weight: 600;
  }
  

----- FILE: scribe/src/components/Spinner/Spinner.tsx -----
import React from 'react';
import './Spinner.css';

const Spinner: React.FC = () => {
  return (
    <div className="spinner-container">
      <div className="spinner-circle"></div>
      <p>Loading...</p>
    </div>
  );
};

export default Spinner;


----- FILE: scribe/src/components/Dashboard/Dashboard.tsx -----
import React from 'react';
import './Dashboard.css';

const Dashboard: React.FC = () => {
  return (
    <div className="dashboard-container">
      <h2>Dashboard</h2>
      <p>Welcome to your dashboard!</p>
    </div>
  );
};

export default Dashboard;


----- FILE: scribe/src/components/Dashboard/Dashboard.css -----
.dashboard-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f5ecd5;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .dashboard-container h2 {
    margin-bottom: 20px;
    text-align: center;
    color: #4A4A4A;
    font-family: "DM Sans", sans-serif;
  }
  
  .dashboard-container p {
    font-size: 18px;
    color: #4A4A4A;
    font-family: "Space Mono", monospace;
    text-align: center;
  }
  

----- FILE: scribe/src/components/AuthContext.tsx -----
import React, { createContext, useContext, useState, useEffect } from 'react';
import Cookies from 'js-cookie';
import { useNavigate } from 'react-router-dom';

interface UserProfile {
  email: string;
  name: string;
  picture: string;
}

interface AuthContextType {
  isAuthenticated: boolean;
  user: UserProfile | null;
  loading: boolean; // Add loading state
  login: () => void;
  logout: (redirect?: () => void) => void;
  verifyAuth: () => void; 
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [user, setUser] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState<boolean>(true); // Initialize loading as true
  const navigate = useNavigate();

  // Check authentication status on initialization
  useEffect(() => {
    verifyAuth();
  }, []);

  const verifyAuth = async () => {
    try {
      const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/auth/verify`, {
        method: 'GET',
        credentials: 'include', // Include cookies in the request
      });

      if (response.ok) {
        const data = await response.json();
        setUser(data.user);
        setIsAuthenticated(true);
      } else {
        setIsAuthenticated(false);
        setUser(null);
      }
    } catch (error) {
      console.error('Error verifying auth:', error);
      setIsAuthenticated(false);
      setUser(null);
    } finally {
      setLoading(false); // Set loading to false after verification
    }
  };

  const login = () => {
    console.log("AuthContext: Initiating Google OAuth login");
    window.location.href = `${process.env.REACT_APP_API_BASE_URL}/auth/google`; // Redirect to the backend's Google OAuth route
  };

  const logout = (redirect?: () => void) => {
    console.log("AuthContext: Logging out");
    setIsAuthenticated(false);
    setUser(null);

    // Remove from cookies
    Cookies.remove('token');

    if (redirect) {
      console.log("AuthContext: Redirecting after logout");
      redirect();
    } else {
      console.log("AuthContext: Navigating to /login after logout");
      navigate('/'); // Redirect to login page on logout
    }
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, user, loading, login, logout, verifyAuth }}>
      {children}
    </AuthContext.Provider>
  );
};


----- FILE: scribe/src/components/Menu/Menu.tsx -----
import React, { useState, useEffect, useRef } from 'react';
import './Menu.css';
import Modal from '../Modal/Modal';
import { useNotificationContext } from '../NotificationContext';
import { useAuth } from '../AuthContext'; // Import the useAuth hook

const Menu: React.FC = () => {
  const [open, setOpen] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);
  const [currentNotification, setCurrentNotification] = useState<any>(null);
  const { notifications, removeNotification } = useNotificationContext();
  const { isAuthenticated, user, login, logout } = useAuth();
  const menuRef = useRef<HTMLDivElement>(null);

  const toggleMenu = () => {
    setOpen(!open);
  };

  const openModal = (notification: any) => {
    setCurrentNotification(notification);
    setModalOpen(true);
  };

  const closeModal = () => {
    setModalOpen(false);
    setCurrentNotification(null);
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  return (
    <div className="notifications" ref={menuRef}>
      <button className="notifications-icon" onClick={toggleMenu}>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <circle cx="12" cy="7" r="4"></circle>
          <path d="M5.2 18.2C6.2 15.3 8.8 13 12 13s5.8 2.3 6.8 5.2"></path>
        </svg>
        {notifications.length > 0 && <span className="badge">{notifications.length}</span>}
      </button>
      {open && (
        <div className="notifications-menu">
          <div className="notifications-list">
            {notifications.length === 0 ? (
              <div className="no-notifications">No notifications</div>
            ) : (
              notifications.map((notification, index) => (
                <div key={index} className="notification-item">
                  <h4>{notification.title}</h4>
                  <p><strong>Datetime:</strong> {notification.datetime}</p>
                  <p><strong>Length:</strong> {notification.length}</p>
                  <button className="view-button" onClick={() => openModal(notification)}>View Details</button>
                  <button className="close-button" onClick={() => removeNotification(index)}>x</button>
                </div>
              ))
            )}
          </div>

          {/* Show login/logout based on authentication state */}
          {!isAuthenticated ? (
            <button className="sign-in" onClick={() => login()}>Sign in with Google</button>
          ) : (
            <div className="user-info">
              <img src={user?.picture} alt={user?.name} className="user-avatar" />
              <span className="user-name">{user?.name}</span>
              <button className="sign-out" onClick={() => logout()}>Sign out</button>
            </div>
          )}
        </div>
      )}
      {currentNotification && (
        <Modal
          isOpen={modalOpen}
          onClose={closeModal}
          title={currentNotification.title}
          content={currentNotification.transcript}
        />
      )}
    </div>
  );
};

export default Menu;


----- FILE: scribe/src/components/Menu/Menu.css -----
.notifications {
  position: relative;
}

.notifications-icon {
  background: none;
  border: none;
  cursor: pointer;
  position: relative;
  padding: 10px;
}

.notifications-icon svg {
  width: 24px;
  height: 24px;
  stroke: #000; /* Adjust stroke color as needed */
}

.badge {
  position: absolute;
  top: 0;
  right: 0;
  background: red;
  color: white;
  border-radius: 50%;
  padding: 2px 6px;
  font-size: 12px;
}

.notifications-menu {
  position: absolute;
  top: 40px;
  right: 0;
  width: 300px;
  background: white;
  border: 1px solid #ccc;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px; /* Rounded corners */
  z-index: 1000;
  padding: 20px; /* Add some padding */
}

.notifications-list {
  max-height: 150px; /* Height for showing two notifications */
  overflow-y: auto;
  flex-grow: 1;
  margin-bottom: 10px; /* Space between list and login button */
}

.notification-item {
  padding: 10px;
  border-bottom: 1px solid #eee;
  position: relative;
}

.notification-item h4 {
  margin: 0 0 5px;
}

.notification-item p {
  margin: 5px 0;
}

.view-button {
  background-color: rgb(199, 162, 107);
  border: none;
  padding: 5px 10px;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: "Space Mono", monospace;
  font-weight: 600;
  color: white;
  border-radius: 4px;
}

.view-button:hover {
  background-color: #bfa26c;
}

.close-button {
  position: absolute;
  top: 12px;
  right: 10px;
  background: none;
  border: none;
  font-size: 16px;
  cursor: pointer;
}

.sign-in {
  background-color: rgb(217, 203, 176);
  border: none;
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: "Space Mono", monospace;
  color: rgb(92, 69, 35);
  font-weight: 500;
  margin: 0 auto 10px; /* Center and space the login button */
  display: block;
}

.sign-in:hover {
  background-color: #d1b179;
}

.user-info {
  display: flex;
  align-items: center;
  justify-content: space-between; /* Space between image and text */
}

.user-avatar {
  width: 50px; /* Adjust the size of the avatar */
  height: 50px;
  border-radius: 50%; /* Make the avatar circular */
  margin-right: 15px; /* Add some space between the avatar and the name */
}

.user-name {
  font-size: 18px; /* Increase font size */
  font-weight: bold;
  color: #333;
  margin-right: auto; /* Push the name to the left */
}

.sign-out {
  background-color: #bfa26c;
  border: none;
  padding: 5px 10px;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: "Space Mono", monospace;
  color: white;
  font-weight: 500;
  border-radius: 4px;
}

.sign-out:hover {
  background-color: #a48452;
}

.no-notifications {
  text-align: center;
  color: #888;
  margin-bottom: 10px;
  font-family: "DM Sans", sans-serif;
}

----- FILE: scribe/src/components/Modal/Modal.css -----
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal {
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  width: 90%;
  max-width: 500px;
  max-height: 80vh; /* Set maximum height */
  overflow-y: auto; /* Enable scrolling for overflow content */
  position: relative;
}

.modal-close {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 24px; /* Increase size for better visibility */
  cursor: pointer;
  color: #888;
}

.modal-close:hover {
  color: #333;
}

.copy-button {
  background-color: rgb(217, 203, 176);
  border: none;
  padding: 5px 10px; /* Make the button smaller */
  font-size: 14px; /* Adjust font size */
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: "Space Mono", monospace;
  color: rgb(92, 69, 35);
  font-weight: 500;
  margin-top: 10px;
  display: block; /* Ensure the button takes its own line */
}

.copy-button:hover {
  background-color: #d1b179;
}

.modal p {
  margin: 20px 0 0;
  font-size: 16px;
  line-height: 1.5;
}


----- FILE: scribe/src/components/Login/Login.tsx -----
import React, { useEffect, useState } from 'react';
import './Login.css';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../AuthContext';

const Login: React.FC = () => {
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const { isAuthenticated, login } = useAuth();

  useEffect(() => {
    if (isAuthenticated) {
      navigate('/dashboard'); // Redirect if already authenticated
    }
  }, [isAuthenticated, navigate]);

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    login(); // Initiate Google OAuth login
  };

  return (
    <div className="login-container">
      <h2>Login</h2>
      {error && <div className="error-message">{error}</div>}
      <form onSubmit={handleLogin}>
        <button type="submit">Login with Google</button>
      </form>
    </div>
  );
};

export default Login;


----- FILE: scribe/src/components/Login/Login.css -----
.login-container {
    max-width: 400px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f5ecd5;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .login-container h2 {
    margin-bottom: 20px;
    text-align: center;
    color: #4A4A4A;
    font-family: "DM Sans", sans-serif;
  }
  
  .login-container label {
    display: block;
    margin-bottom: 5px;
    color: #4A4A4A;
    font-family: "Space Mono", monospace;
    font-weight: 600;
  }
  
  .login-container input {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid rgb(199, 162, 107);
    border-radius: 4px;
    background-color: #FFF9F0;
    font-family: "Space Mono", monospace;
  }
  
  .login-container button {
    width: 100%;
    padding: 10px;
    background-color: rgb(199, 162, 107);
    border: none;
    border-radius: 4px;
    color: white;
    font-family: "Space Mono", monospace;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .login-container button:hover {
    background-color: #bfa26c;
  }
  
  .error-message {
    color: red;
    margin-bottom: 10px;
  }
  

----- FILE: scribe/src/components/Header/Header.tsx -----
import React from 'react';
import './Header.css';
import Menu from '../Menu/Menu';

const Header: React.FC = () => {
  return (
    <header className="header">
      <div className="logo">
        <a href="/">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" data-id="4"><path d="m8 3 4 8 5-5 5 15H2L8 3z"></path></svg> 
          <span>&nbsp;Scribe AI</span>
        </a>
      </div>
      <div className="header-right">
        <Menu />
      </div>
    </header>
  );
};

export default Header;


----- FILE: scribe/src/components/Header/Header.css -----
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #D2B48C;
  padding: 10px 20px;
  width: 100%;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  box-sizing: border-box;
}

.logo {
  display: flex;
  align-items: center;
  font-size: 18px;
  font-weight: bold;
  font-family: "Space Mono", monospace;
  color: #000000;
}

.logo a {
  text-decoration: none; /* Remove underline */
  color: inherit; /* Inherit the color from the parent */
  display: flex; /* Make sure the content inside is flexibly aligned */
  align-items: center; /* Align items vertically */
}

.header-right {
  display: flex;
  align-items: center;
  position: relative;
}

.notifications {
  position: relative;
  margin-right: 20px;
}

.notifications-icon {
  background: none;
  border: none;
  cursor: pointer;
  padding: 10px;
}

.notifications-icon svg {
  width: 24px;
  height: 24px;
  stroke: #000;
}

.notifications-menu {
  position: absolute;
  right: 0;
  top: 40px;
  background-color: #fff;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  padding: 10px;
  border-radius: 4px;
  z-index: 1000;
}

.notification-item {
  padding: 10px;
  border-bottom: 1px solid #eee;
}

.notification-item h4 {
  margin: 0;
  font-size: 16px;
  font-weight: bold;
}

.notification-item p {
  margin: 5px 0;
  font-size: 14px;
}

.view-button {
  background-color: rgb(217, 203, 176);
  border: none;
  padding: 5px 10px;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: "Space Mono", monospace;
  color: rgb(92, 69, 35);
  font-weight: 500;
}

.view-button:hover {
  background-color: #d1b179;
}

.dropdown {
  position: relative;
}

.dropdown-toggle {
  background: none;
  border: none;
  cursor: pointer;
  padding: 10px;
  font-family: "Space Mono", monospace;
  font-size: 14px;
  font-weight: 500;
  color: rgb(92, 69, 35);
}

.dropdown-menu {
  position: absolute;
  right: 0; /* Ensure the menu is aligned to the right of the parent */
  top: 40px; /* Adjust the positioning to avoid overlap */
  background-color: #fff;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  padding: 10px;
  border-radius: 4px;
  z-index: 1000;
}

.sign-in {
  background-color: rgb(217, 203, 176);
  border: none;
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-family: "Space Mono", monospace;
  color: rgb(92, 69, 35);
  font-weight: 500;
}

.sign-in:hover {
  background-color: #d1b179;
}

.badge {
  position: absolute;
  top: 0;
  right: 0;
  background: red;
  color: white;
  border-radius: 50%;
  padding: 2px 6px;
  font-size: 12px;
}

----- FILE: scribe/src/components/NotificationContext.tsx -----
import React, { createContext, useState, useContext, ReactNode } from 'react';

interface Notification {
  title: string;
  datetime: string;
  length: string;
  progress: string;
  transcript: string;
}

interface NotificationContextType {
  notifications: Notification[];
  addNotification: (notification: Notification) => void;
  removeNotification: (index: number) => void;
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

export const useNotificationContext = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotificationContext must be used within a NotificationProvider');
  }
  return context;
};

interface NotificationProviderProps {
  children: ReactNode;
}

export const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {
  const [notifications, setNotifications] = useState<Notification[]>([]);

  const addNotification = (notification: Notification) => {
    setNotifications((prevNotifications) => [...prevNotifications, notification]);
  };

  const removeNotification = (index: number) => {
    setNotifications((prevNotifications) =>
      prevNotifications.filter((_, i) => i !== index)
    );
  };

  return (
    <NotificationContext.Provider value={{ notifications, addNotification, removeNotification }}>
      {children}
    </NotificationContext.Provider>
  );
};


